// Available to customize the build

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
       maven {
          url "https://repo.lab.pl.alcatel-lucent.com/jcenter"
        }
    }
    jacoco {
        toolVersion = '0.8.4'
    }
}


buildscript {
  repositories {
    maven {
      url "https://repo.lab.pl.alcatel-lucent.com/jcenter"
    }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
    classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.4.14'
  }

}

apply plugin: "org.sonarqube"

wrapper {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}


def getJacocoReportPaths() {
    def paths = []
    fileTree(dir: '..', include: '**/jacoco/test.exec').visit { details ->
        if (details.file.isFile())
            paths << details.file.path
    }

    //System tests jacoco exec reports
    fileTree(dir: '../system-tests', include: '**/test.exec').visit { details ->
        if (details.file.isFile())
            paths << details.file.path
    }
    logger.info "Jacoco report paths: ${paths}"
    return paths
}

def getJacocoReportPathsAsString() {
    def jacocoReportPaths = getJacocoReportPaths().join(",")
    return jacocoReportPaths
}

subprojects {
    dependencies {
        testCompile 'junit:junit:4.11'
    }

    jacocoTestReport {
        getAdditionalSourceDirs().setFrom(files(sourceSets.main.allSource.srcDirs))
	getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
	getClassDirectories().setFrom(files(sourceSets.main.output))

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", getJacocoReportPathsAsString()
        }
    }

    test {
        jacoco {
            excludes = ["**/sun/**/*"]
        }
    }

    javadoc {
        failOnError = false
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(subprojects.sourceSets.main.output)

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/sun/**/*')
        }))

        getClassDirectories().setFrom(classDirectories.filter {File f -> 
            !f.path.contains("com.alcatel.as.agent.http") //excludes class from old HTTP Proxylet agent
        })

        getSourceDirectories().setFrom(sourceDirectories.filter {File f -> 
            !f.path.contains("com.alcatel.as.agent.http") //excludes sources from old HTTP Proxylet agent
        })

    }

    executionData(files(getJacocoReportPaths()))

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }
}
