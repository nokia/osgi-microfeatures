#!/bin/bash
 
### Installs buildah if not present on your machine
rpm -qa | grep -qw buildah || yum install -y buildah
 
### Change storage driver to vfs for Jenkins
[ ! -f /etc/fedora-release ] && sed -i 's/driver = "overlay"/driver = "vfs"/' /etc/containers/storage.conf
 
set -o errexit
set -x

buildah pull csf-docker-delivered.repo.lab.pl.alcatel-lucent.com/casr-base-11:CASR_BASE
casr=$(buildah from csf-docker-delivered.repo.lab.pl.alcatel-lucent.com/casr-base-11:CASR_BASE)
mnt_casr=$(buildah mount $casr)
 
CASR_REPO=csf-mvn-delivered
LOCAL_OBR_PORT=80
CASR_LOGGER="rootLogger=WARN"
for i in "$@"
do
case $i in
    -n=*|--name=*)
    INSTANCE_NAME="${i#*=}"
    shift
    ;;
    -v=*|--version=*)
    INSTANCE_VERSION="${i#*=}"
    shift
    ;;
    --casr=*)
    CASR_VERSION="${i#*=}"
    shift
    ;;
    --obr=*)
    CASR_REPO="${i#*=}"
    shift
    ;;
    --localport=*)
    LOCAL_OBR_PORT="${i#*=}"
    shift
    ;;
    -f=*|--features=*)
    FEATURES="${i#*=}"
    shift
    ;;
    -l=*|--logger=*)
    CASR_LOGGER="${i#*=}"
    shift
    ;;
    *)
    ;;
esac
done
 
buildah config --env INSTANCE_NAME=${INSTANCE_NAME} "${casr}"
buildah config --env INSTANCE_VERSION=${INSTANCE_VERSION} "${casr}"
buildah config --env CASR_VERSION=${CASR_VERSION} "${casr}"
buildah config --env CASR_REPO=${CASR_REPO} "${casr}"
buildah config --env LOCAL_OBR_PORT=${LOCAL_OBR_PORT} "${casr}"
buildah config --env FEATURES="${FEATURES}" "${casr}"
buildah config --env CASR_LOGGER="${CASR_LOGGER}" "${casr}"
buildah config --env MINIMAL_JVM=true "${casr}" #Set to false if you want to generate the full JVM

buildah copy --chown 7777:7777 "${casr}" 'jvm.opt' '/tmp/jvm.opt'
buildah run "${casr}" -- sh -c /casr/create_runtime.sh
 
########
buildah pull csf-docker-delivered.repo.lab.pl.alcatel-lucent.com/os_base/centos-nano:NANO
centos=$(buildah from csf-docker-delivered.repo.lab.pl.alcatel-lucent.com/os_base/centos-nano:NANO)
mnt_centos=$(buildah mount $centos)
 
cp -r "${mnt_casr}"/opt/jdk11-minimal "${mnt_centos}"/opt/jdk11-minimal
 
buildah config --env JAVA_HOME=/opt/jdk11-minimal/bin "${centos}"
buildah config --env PATH="/opt/jdk11-minimal/bin:${PATH}" "${centos}"
 
buildah config --env INSTANCE_NAME=${INSTANCE_NAME} "${centos}"
buildah config --env INSTANCE_VERSION=${INSTANCE_VERSION} "${centos}"
buildah config --env CASR_VERSION=${CASR_VERSION} "${centos}"
buildah config --env CASR_REPO=${CASR_REPO} "${centos}"
buildah config --env LOCAL_OBR_PORT=${LOCAL_OBR_PORT} "${centos}"
buildah config --env FEATURES="${FEATURES}" "${centos}"
buildah config --env CASR_LOGGER="${CASR_LOGGER}" "${centos}"

buildah config --label MAINTAINER="Nokia CASR Team" "${centos}"
buildah config --label IMAGE_NAME="casr-app-controller-gui" "${centos}"
buildah config --label BASE_IMAGE="csf-docker-delivered.repo.lab.pl.alcatel-lucent.com/casr-base-11:CASR_BASE" "${centos}"
 
cp -r "${mnt_casr}"/casr "${mnt_centos}"/casr
 
yum install -y --installroot $mnt_centos \
               --setopt=tsflags=nodocs \
               --setopt=override_install_langs=en_US.utf8 \
    findutils hostname shadow-utils telnet which yum
 
cp -r "${mnt_centos}"/casr/launch.sh "${mnt_centos}"/casr/"${INSTANCE_NAME}-${INSTANCE_VERSION}"
buildah config --workingdir /casr/"${INSTANCE_NAME}-${INSTANCE_VERSION}" "${centos}"
buildah config --entrypoint '["/bin/sh -c launch.sh"]' "${centos}"
 
buildah run "${centos}" -- groupadd --gid 7777 -r casr
buildah run "${centos}" -- useradd --no-log-init -r --gid 7777 --uid 7777 casr
buildah run "${centos}" -- chown -R 7777:7777 /casr
buildah run "${centos}" -- mkdir /home/casr
buildah run "${centos}" -- chown -R 7777:7777 /home/casr
buildah run "${centos}" -- chmod -R 774 /casr
buildah config --user 7777 "${centos}"
 
buildah config --port 9090 "${centos}"

### Commit image and cleanup
buildah commit $centos casr-app-controller-gui:latest
buildah unmount $centos
buildah unmount $casr
buildah rm $centos
buildah rm $casr
 
### Push image to local repository
buildah push localhost/casr-app-controller-gui:latest docker-archive:tmp-tar.tgz:casr-app-controller-gui:latest
docker load -i tmp-tar.tgz
rm -f tmp-tar.tgz