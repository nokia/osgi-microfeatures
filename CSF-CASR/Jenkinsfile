#!groovy

pipeline {
   agent {
     kubernetes {
       label 'build-centos-c-jdk8-jdk11-mvn3-casr'
       inheritFrom 'k8s-build'
       containerTemplate {
         name 'java-c-mvn'
         image "csf-docker-delivered.${ARTIFACTORY_URL}/build_centos_c_jdk8_mvn3:1.0.9"
         alwaysPullImage true
         workingDir '/home/jenkins'
         ttyEnabled true
         command 'cat'
         args ''
       }
     }  
   }

  options {
     buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '0', numToKeepStr: '50'))
  }

  triggers {
    gerrit(customUrl: '',
            gerritProjects: [[
                branches:
                    [[compareType: 'PLAIN',
                      pattern: '1.0'
                    ]],
                    compareType: 'PLAIN',
                    disableStrictForbiddenFileVerification: false,
                    pattern: 'CSF-CASR'
            ]],
            serverName: 'nokia-gerrit',
            triggerOnEvents:
                [changeMerged(),
                 patchsetCreated(excludeDrafts: true,
                                 excludeNoCodeChange: false,
                                 excludeTrivialRebase: false)
                ]
     )
  
     parameterizedCron('H 4 * * * % TEST=true;SONAR=true;JAVADOC=false')     
  }

  parameters {
    string(name: 'GERRIT_REFSPEC',
           defaultValue: 'refs/heads/1.0',
    	   description: 'Build branch 1.0 by default, can be overridden on Gerrit builds')
	    
    booleanParam(name: 'TEST',
        defaultValue: false,
        description: 'Enter true to perform all tests.')

    string(name: 'TEST_OBR_URLS',
          defaultValue: '',
    	   description: 'Configures the OBR to use when doing tests. Leave this property empty in case you want to test without any already deployed OBR.'    )

    booleanParam(name: 'SONAR',
    	   defaultValue: false,
    	   description: 'Run SonarQube.')   
    booleanParam(name: 'JAVADOC',
    	   defaultValue: false,
    	   description: 'Generate and push javadoc to the documentation gitlab repo')  

    booleanParam(name: 'ARCHIVE_LOGS',
    	   defaultValue: false,
    	   description: 'When running tests, force archiving of system tests runtime logs. Logs are alway archived when the build is unstable.')   
  }

  environment {
  	CSF_BUNDLE_SOURCES = false
  }

  stages {
    stage('Build Java') {
      when {
        expression { params.TEST || params.DEPLOY || params.JAVADOC }
      }
      steps {
        container('java-c-mvn') {
          sh """
          cd core
          ./gradlew jar
	  cd ..
	  ./runtime/create-obr-m2.sh
          """
        }
      }
    }
 
    stage('Tests without OBR') {
      when {
        expression { params.TEST && TEST_OBR_URLS == '' }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'csf-jenkins-for-artifactory',
                          usernameVariable: 'ARTIFACTORY_BUILD_LOGIN_USR', passwordVariable: 'ARTIFACTORY_BUILD_LOGIN_PSW')]) {
          container('java-c-mvn') {
            sh """
            cd core
            ./gradlew check 

            cd ../system-tests
            ./run-all-system-tests.sh file://\$HOME/.m2/repository/obr.xml

            cd ../core
            ./gradlew jacocoRootReport || echo "Jacoco report generation failed!"
            """
          }
        }
      }
    }

    stage('Tests with OBR') {
      when {
        expression { params.TEST  && TEST_OBR_URLS != '' }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'csf-jenkins-for-artifactory',
                          usernameVariable: 'ARTIFACTORY_BUILD_LOGIN_USR', passwordVariable: 'ARTIFACTORY_BUILD_LOGIN_PSW')]) {
          container('java-c-mvn') {
            sh """
            cd core
            ./gradlew check 

            cd ../system-tests
            ./run-all-system-tests.sh "${params.TEST_OBR_URLS}"

            cd ../core
            ./gradlew jacocoRootReport || echo "Jacoco report generation failed!"
            """
          }
        }
      }
    }

    stage('SQ Analysis publish') {
        environment {
         SONAR_CSF_LOGIN = credentials("sonar-csf-login")
       }
       when {
         expression { params.SONAR }
       }
       steps {
          container('java-c-mvn') {
            withSonarQubeEnv('sonar_csf') {
               sh """
                find . -name "*.exec" -exec du -h {} +

                cd core
                ./gradlew sonarqube \
                  -Dsonar.analysis.mode=publish \
                  -Dsonar.login=${SONAR_CSF_LOGIN} \
                  -Dsonar.c.file.suffixes=- \
                  -Dsonar.cpp.file.suffixes=- \
                  -Dsonar.objc.file.suffixes=- \
                  -Dsonar.coverage.jacoco.xmlReportPaths=../build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml
                """                      
            }
          }
       } 
    }

    stage('Generate and publish JavaDoc') {
       when {
         expression { params.JAVADOC }
       }
        steps {
          container('java-c-mvn') {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh "./scripts/gen_javadoc.sh"
              withCredentials([usernamePassword(credentialsId: 'casr-doc-git-repo', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                sh "./scripts/push_javadoc_jenkins.sh"
              }
            }
          }
        } 
    }
  }

  post {
    regression { 
      script {
        if (params["TEST"]) {
          sh "./system-tests/archive-logs.sh"

        }
      }
    }

    unstable {
      script {
        if (params["TEST"]) {
          sh "./system-tests/archive-logs.sh"

        }
      }
    }
    always {
      script {
        if (params["TEST"] && params["ARCHIVE_LOGS"]) {
          sh "./system-tests/archive-logs.sh"
        }

        junit allowEmptyResults: true, testResults: '**/test-reports/*/*.xml'
        publishHTML (target: [
            allowMissing: true,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'core/build/reports/jacoco/jacocoRootReport/html',
            reportFiles: 'index.html',
            reportName: "JaCoCo Code Coverage (Core)"
          ])
      }
    }
  }
}
