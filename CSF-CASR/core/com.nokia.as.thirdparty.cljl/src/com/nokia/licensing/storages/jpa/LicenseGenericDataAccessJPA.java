/* ========================================== */
/* Copyright (c) 2009 Nokia                   */
/*          All rights reserved.              */
/*          Company Confidential              */
/* ========================================== */

package com.nokia.licensing.storages.jpa;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.nokia.licensing.dao.LicenseKeyJPA;
import com.nokia.licensing.interfaces.LicenseException;
import com.nokia.licensing.logging.LicenseLogger;
import com.nokia.licensing.querycache.QueryRetrieval;
import com.nokia.licensing.utils.LicenseConstants;


/**
 * This class is a data holder class and holds License Key information. This information is per the encrypted key
 * generated by the encryptData method in LicenseEncrypt class and the serial number in the corresponding encrypted
 * data.
 *
 * @author Rama Manohar P
 * @version 1.0
 *
 */
public class LicenseGenericDataAccessJPA {

	/**
	 * Accesses EncryptKey Information based on the SerialNumber Returns the EncryptKey Information.
	 *
	 * @param serialNbr
	 * @return String -- The Encrypt Key Information
	 * @throws Exception
	 */
	public static byte[] getEncryptKey(final EntityManager entityManager, final String serialNbr) throws Exception {
		LicenseLogger.getInstance().finest(LicenseGenericDataAccessJPA.class.getName(), "getEncryptKey",
				"Retrieving Data from Data Base based on serialnumber.");

		byte[] encryptKey = null;
		String strquery = null;
		Query query = null;

		try {
			strquery = QueryRetrieval.getSQLData(LicenseConstants.SELECTLICENSEKEYBYSERIALNUMBER);

			if (null != entityManager) {
				query = entityManager.createNativeQuery(strquery);
				query.setParameter(1, serialNbr);
				encryptKey = (byte[]) query.getSingleResult();
			}

			LicenseLogger.getInstance().finest(LicenseGenericDataAccessJPA.class.getName(), "getEncryptKey",
					"Retrieving License Key Data from Data Base based on serialnumber is completed.");
		} catch (final Exception e) {
			LicenseLogger.getInstance().error(LicenseGenericDataAccessJPA.class.getName(), "getEncryptKey",
					"Retrieving Data from Data Base based on serialnumber is failed." + e.getMessage());

			throw e;
		}

		return encryptKey;
	}

	/**
	 * Inserts EncryptKey and serialNumber information into a corresponding Data Storage. DataBaseUtil class uses this
	 * method to insert data into the relevant Data Storage
	 *
	 * @param serialNbr
	 * @param encryptKey
	 * @throws Exception
	 */
	public static void setEncryptKey(final EntityManager entityManager, final String serialNbr, final byte[] encryptKey)
			throws Exception {
		LicenseLogger.getInstance().finest(LicenseGenericDataAccessJPA.class.getName(), "setEncryptKey",
				"Inserrting License Key Data into Data Base...");

		LicenseKeyJPA licenseKeyJPA = null;

		try {
			if (null != entityManager) {
				licenseKeyJPA = new LicenseKeyJPA();
				licenseKeyJPA.setSerialNbr(serialNbr);
				licenseKeyJPA.setKey(encryptKey);
				entityManager.persist(licenseKeyJPA);
				LicenseLogger.getInstance().finest(LicenseGenericDataAccessJPA.class.getName(), "setEncryptKey",
						"License Key Data is setted to entitymanager.");
			}
		} catch (final Exception e) {
			LicenseLogger.getInstance().error(LicenseGenericDataAccessJPA.class.getName(), "insertLicenseInformation",
					"Data insertion into the database is failed. : " + e.getMessage());

			final LicenseException licenseException = new LicenseException(
					" Data insertion into the database is failed. : " + e.getMessage());

			licenseException.setErrorCode("CLJL112");
			LicenseLogger.getInstance().error(LicenseGenericDataAccessJPA.class.getName(), "setEncryptKey",
					"error code set to: " + licenseException.getErrorCode());

			throw licenseException;
		}
	}
}
