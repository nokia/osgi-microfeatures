/* ========================================== */
/* Copyright (c) 2009 Nokia                   */
/*          All rights reserved.              */
/*          Company Confidential              */
/* ========================================== */

package com.nokia.licensing.storages.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.nokia.licensing.logging.LicenseLogger;
import com.nokia.licensing.querycache.QueryRetrieval;
import com.nokia.licensing.utils.LicenseConstants;


/**
 * This class is a data holder class and holds License Key information. This information is per the encrypted key
 * generated by the encryptData method in LicenseEncrypt class and the serial number in the corresponding encrypted
 * data.
 *
 * @author Rama Manohar P
 * @version 1.0
 *
 */
public class LicenseGenericDataAccess {

	/**
	 * Inserts EncryptKey and SerialNumber information into a corresponding Data Storage. DataBaseUtil class uses this
	 * method to insert data into the relevant Data Storage
	 *
	 * @param serialNbr
	 * @param encryptKey
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public static void setEncryptKey(final Connection connection, final String serialNbr, final byte[] encryptKey)
			throws SQLException, ClassNotFoundException {
		LicenseLogger.getInstance().finest(LicenseGenericDataAccess.class.getName(), "setEncryptKey",
				"Inserrting Data into Data Base...");

		PreparedStatement preparedStatement = null;

		try {
			final String strquery = QueryRetrieval.getSQLData(LicenseConstants.INSERTLICENSEKEY);

			if (connection != null) {
				preparedStatement = connection.prepareStatement(strquery);
			}

			preparedStatement.setString(1, serialNbr);
			preparedStatement.setBytes(2, encryptKey);
			preparedStatement.executeUpdate();
			LicenseLogger.getInstance().finest(LicenseGenericDataAccess.class.getName(), "setEncryptKey",
					"Data is inserted into License Key Data Base is completed.");
		} catch (final SQLException sqle) {
			LicenseLogger.getInstance().error(LicenseGenericDataAccess.class.getName(), "setEncryptKey",
					"Data insertion is failed." + sqle.getMessage());

			throw sqle;
		} finally {
			ConnectionUtil.closeConnection(preparedStatement, null);
		}
	}

	/**
	 * Accesses EncryptKey Information based on the SerialNumber Returns the EncryptKey Information.
	 *
	 * @param serialNbr
	 * @return String -- The Encrypt Key Information
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public static byte[] getEncryptKey(final Connection connection, final String serialNbr)
			throws SQLException, ClassNotFoundException {
		LicenseLogger.getInstance().finest(LicenseGenericDataAccess.class.getName(), "getEncryptKey",
				"Retrieving Data from Data Base based on serialnumber.");

		byte[] encryptKey = null;
		PreparedStatement preparedStatement = null;

		try {
			final String strquery = QueryRetrieval.getSQLData(LicenseConstants.SELECTLICENSEKEYBYSERIALNUMBER);

			if (connection != null) {
				preparedStatement = connection.prepareStatement(strquery);
			}

			preparedStatement.setString(1, serialNbr);

			final ResultSet resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				encryptKey = resultSet.getBytes(1);
			}

			LicenseLogger.getInstance().finest(LicenseGenericDataAccess.class.getName(), "getEncryptKey",
					"Retrieving License Key Data from Data Base based on serialnumber is completed.");
		} catch (final SQLException sqle) {
			LicenseLogger.getInstance().error(LicenseGenericDataAccess.class.getName(), "getEncryptKey",
					"Retrieving Data from Data Base based on serialnumber is failed." + sqle.getMessage());

			throw sqle;
		} finally {
			ConnectionUtil.closeConnection(preparedStatement, null);
		}

		return encryptKey;
	}
}
