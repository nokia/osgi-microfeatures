#!groovy

import cto.devops.jenkins.Utils
@Library('csf-jenkinslib') _

pipeline {
    agent {
        kubernetes {
        inheritFrom 'k8s-dind-rootless'
        defaultContainer 'tools'
        yaml cciContainers([
            [name: 'builder',    image: "csf-docker-delivered.${ARTIFACTORY_URL}/build_centos_c_jdk8_mvn3:1.0.10",    run_as_user: '0'],
            cciMalwareScanContainer()
        ])
        }
    }

    options { 
        disableConcurrentBuilds() 
    }

    parameters {
        choice(name: 'IMAGE',
               choices: 'casr-base\ncasr-apps')
        choice(name: 'DOCKER_DEPLOY_REPO',
               choices: 'csf-docker-inprogress\ncsf-docker-candidates\ncsf-docker-delivered')
        string(name: 'OBR_VERSION',
               defaultValue: '')
        choice(name: 'OBR_REPO',
               choices: 'sandbox-mvn-candidates\ncsf-mvn-candidates\ncsf-mvn-delivered')
        booleanParam(name: 'LOCAL',
                     defaultValue: false,
                     description: 'True if the docker is built from a local code')
        string(name: 'COMMIT',
               defaultValue: '1.0',
               description: 'Branch, tag or commit id to use to build the docker')
        string(name :'JAVA_11_OVERRIDE',
                defaultValue : '',
                description : 'force the Java 11 java_base image to this version instead of using the latest')
        string(name :'CASR_BASE_11_VERSION_OVERRIDE',
                defaultValue : '',
                description : 'force the Java 11 casr_base image to be pushed with this version instead of the next increment (use only with sandbox!)')

    }

    environment { 
        ARTIFACTORY_BUILD_LOGIN = credentials("csf-jenkins-for-artifactory")
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm: [$class: 'GitSCM', 
                               branches: [[name: params.COMMIT]], 
                               doGenerateSubmoduleConfigurations: false, 
                               extensions: [[
                                  $class: 'CloneOption', 
                                  noTags: false, 
                                  reference: '', 
                                  shallow: true, 
                                  timeout: 20]], 
                               submoduleCfg: [], 
                               userRemoteConfigs: [[
                                  credentialsId: 'csf-gerrit-ssh', 
                                  url: 'ssh://gerrit.ext.net.nokia.com:29418/CSF-CASR']]
                              ]
            }
        }

        stage('Build Java') {
            when { expression { params.LOCAL == true } }
            steps {
                container('builder') {
                    sh """
                    cd core
                    ./gradlew jar
                    cd ../runtime
                    ./create-obr-m2.sh
                    """
                }
            }
        }

        stage('Build casr-base') {
            when { expression { params.IMAGE == "casr-base" } }
            steps {
                container('builder') {
                    sh """
                    pip install --user requests
                    cd docker
                    export BUILDAH_ISOLATION=chroot
                    make LATEST_JAVA_11_OVERRIDE=""" + params.JAVA_11_OVERRIDE + """ buildBase
                    """
                }
            }
        }

        stage('Push casr-base') {
            when { expression { params.IMAGE == "casr-base" } }
            steps {
                container('tools') {
                    sh """
                    cd docker
                    make NEXT_CASR_11_OVERRIDE=""" + params.CASR_BASE_11_VERSION_OVERRIDE + """ DOCKER_DEPLOY_REPO=""" + params.DOCKER_DEPLOY_REPO + """ pushBase
                    """

                    script {
                        if (fileExists("docker/pushlist")) {
                            def file = readFile "docker/pushlist"
                            def images = file.trim().split('\n') as List
                            if (images[0].contains('csf-docker-inprogress')) {
                                csfDockerPublish imagesList: images, interActivePromotion: false, rhelPkgChk: true
                            } else { 
                                csfDockerPublish imagesList: images, interActivePromotion: true, rhelPkgChk: true
                            }
                        }
                    }
                }
            }
        }

        stage('Build casr-apps') {
            when { expression { params.IMAGE == "casr-apps" } }
            steps {
                container('builder') {
                    sh """
                    pip install --user requests
                    cd docker
                    export BUILDAH_ISOLATION=chroot
                    make DOCKER_DEPLOY_REPO=""" + params.DOCKER_DEPLOY_REPO + """ OBR_VERSION=""" + params.OBR_VERSION + """ OBR_REPO=""" + params.OBR_REPO + """ LOCAL=""" + params.LOCAL + """ buildApps
                    """
                }
            }
        }

        stage('Push casr-apps') {
            when { expression { params.IMAGE == "casr-apps" } }
            steps {
                container('tools') {
                    sh """
                    cd docker
                    make DOCKER_DEPLOY_REPO=""" + params.DOCKER_DEPLOY_REPO + """ OBR_VERSION=""" + params.OBR_VERSION + """ OBR_REPO=""" + params.OBR_REPO + """ LOCAL=""" + params.LOCAL + """ pushApps
                    """

                    script {
                        if (fileExists("docker/pushlist")) {
                            def file = readFile "docker/pushlist"
                            def images = file.trim().split('\n') as List
                            if (images[0].contains('csf-docker-inprogress')) {
                                csfDockerPublish imagesList: images, interActivePromotion: false, rhelPkgChk: true
                            } else { 
                                csfDockerPublish imagesList: images, interActivePromotion: true, rhelPkgChk: true
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning'
            container('tools') {
                sh """
                    cd docker
                    pip install --user requests
                    make LOCAL=""" + params.LOCAL + """ clean
                """
            }
            deleteDir()
            echo 'Done'
        }   
    }
}