#!groovy

pipeline {
   /*
     jenkins job used to deploy microfeature jar to artifactory.
   */

   agent {
     kubernetes {
       label 'build-centos-c-jdk8-jdk11-mvn3-casr'
       inheritFrom 'k8s-build'
       containerTemplate {
         name 'java-c-mvn'
         image "csf-docker-delivered.${ARTIFACTORY_URL}/build_centos_c_jdk8_mvn3:1.0.9"
         alwaysPullImage true
         workingDir '/home/jenkins'
         ttyEnabled true
         command 'cat'
         args ''
       }
     }  
   }

  parameters {
    choice(name: 'REPO',
	   choices: 'https://repo.lab.pl.alcatel-lucent.com/sandbox-mvn-candidates-local\nhttps://repo.lab.pl.alcatel-lucent.com/csf-mvn-candidates-local\nhttps://repo.lab.pl.alcatel-lucent.com/csf-mvn-delivered-local\n',
    	   description: 'Configures the OBR artifactory repository where the microfeature jar has to be deployed. WARNING: if you select the delivered repository, you will not be able to revert.')

    string(name: 'RELEASE',
           defaultValue: '1.0.0',
    	   description: 'Configures the microfeature release number. Add -SNAPSHOT in case you deploy to a snapshot repository.')
  }

  environment {
	MF_GID = "com.nokia.casr.microfeatures"
	MF_AID = "com.nokia.casr.microfeatures.main"
	MF_JAR = "../core/com.nokia.as.microfeatures.admin/generated/distributions/executable/launch.jar"
	MVN = "/opt/apache-maven/bin/mvn"
  }

  stages {

    stage('Deploy MicroFeature') {
      when {
        expression { env.GERRIT_EVENT_TYPE != 'patchset-created' && env.GERRIT_EVENT_TYPE != 'change-merged' }
      }
      steps {
          withCredentials([usernamePassword(credentialsId: 'csf-jenkins-for-artifactory',
                          usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
                          
          	script {
          	    container('java-c-mvn') {          	
	      		sh """
          		cd core
	      		./gradlew jar
	      		./gradlew com.nokia.as.microfeatures.admin:export.launch
	      		cd ..
	      		"""
			
	      		if (params["REPO"] == "https://repo.lab.pl.alcatel-lucent.com/sandbox-mvn-candidates-local") {
		  		sh """
		  		cd runtime
				echo '<settings>' > settings.xml
				echo '<mirrors>' >> settings.xml
				echo '<mirror>' >> settings.xml
				echo '<id>internal-repository</id>' >> settings.xml
				echo '<name>Maven Repository Manager running on repo.mycompany.com</name>' >> settings.xml
				echo '<url>https://repo.lab.pl.alcatel-lucent.com/csf-mvn-delivered</url>' >> settings.xml
				echo '<mirrorOf>*</mirrorOf>' >> settings.xml
				echo '</mirror>' >> settings.xml
				echo '</mirrors>' >> settings.xml
				echo '</settings>' >> settings.xml

				${MVN} deploy:deploy-file -s settings.xml -Durl=${params.REPO} -Dfile=${MF_JAR} -Dpackaging=jar -DgeneratePom=true -DgroupId=${MF_GID} -DartifactId=${MF_AID} -Dversion=${params.RELEASE}
		  		"""
          		} else {
		  		sh """
		  		cd runtime
		  		echo '<settings><servers><server><id>candidate</id><username>${user}</username><password>${password}</password></server></servers>' >> settings.xml
				echo '<mirrors>' >> settings.xml
				echo '<mirror>' >> settings.xml
				echo '<id>internal-repository</id>' >> settings.xml
				echo '<name>Maven Repository Manager running on repo.mycompany.com</name>' >> settings.xml
				echo '<url>https://repo.lab.pl.alcatel-lucent.com/csf-mvn-delivered</url>' >> settings.xml
				echo '<mirrorOf>*</mirrorOf>' >> settings.xml
				echo '</mirror>' >> settings.xml
				echo '</mirrors>' >> settings.xml
				echo '</settings>' >> settings.xml
				${MVN} deploy:deploy-file -s settings.xml -Duser=${USER} -Dpassword=${PASSWORD} -DrepositoryId=candidate -Durl=${params.REPO} -Dfile=${MF_JAR} -Dpackaging=jar -DgeneratePom=true -DgroupId=${MF_GID} -DartifactId=${MF_AID} -Dversion=${params.RELEASE}
		  		"""
          		}
		    }
	    	}
          }
      }
    }

  }

  post {
    always {
      deleteDir()
    }
  }
}

