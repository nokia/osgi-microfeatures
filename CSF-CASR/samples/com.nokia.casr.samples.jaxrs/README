Overview
========

This bndtools sample provides a release process of OSGi bundles to a maven Artifactory repository that is compatible to CSF
(csf-mvn-snapshots/csf-mvn-candidates/csf-mvn-delivered).

For testing purpose, you can install an artifactory-pro locally on your host and deploy artifacts to it from Gradle or Eclipse.
The normal process is to deploy the artifacts using gradle commands from Jenkins.

In addition, optional semantic versioning is also supported. Using Semantic Versioning bndtools feature, you can automatically
manage OSGI bundle/package version. It is recommended to use this feature, else you will have to maintain all your bundle/package
versions manually (this error prone if your workspace contains many bundles).

The sample has been made based on some materials found from from the following resources:

	http://enroute.osgi.org/tutorial_maven/050-start.html
	https://github.com/osgi/osgi.enroute
	http://bnd.bndtools.org/
	http://bndtools.org/

This README file does not document bnd or bndtools.

For more information about bndtools, please check:

    http://bndtools.org

For more informations about the syntax of "bnd" files, please check:

    http://bnd.bndtools.org

BndTools overview
=================

BndTools is a gradle environment allowing to generate bundles. It is also an Eclipse plugin.
Bnd is a build environment allowing to generate osgi bundles, and BndTools is based on Bnd.

Installation
============

To play with this bndtools workspace example, first install artifactory-pro locally (you need to create a temporary license).
You can also install artifactory-oss, but you won't be able to "promote" maven artifacts from candidate to delivered repo.

once artifactory-pro is installed and started:

- use "admin" as the admin user account.

- set "admin" password to "admin123"

- define an http proxy (like 135.245.192.7:8000) and declare it as "System Default" and restart artifactory

- create a structure of maven repositores which looks like the same as the one we use in nokia/csf:

1) create the following local maven repositories:

libs-candidate-local
libs-delivered-local
libs-snapshot-local (this one is already available when you install artifactory)

2) create the following remote maven repository:

central -> https://repo.maven.apache.org/maven2/

3) create the following virtual maven repositories:

libs-snapshot -> libs-snapshot-local, central
libs-candidate -> libs-candidate-local, central
libs-delivered -> libs-delivered-local, central

Description of the workspace example
====================================

This workspace contains a com.nokia.csf.service bundle. it's a simple osgi service.
The workspace also shows how to make an osgi integration test (see com.nokia.csf.common.service.itest, where dependency manager lambda is used for declaring
service dependencies from junit).

So, when you build the workspace, all bundles are generated to <project>/generated directory, as well as to ~/.m2/repository.
Doing so allows other maven compatible projects to depend on the generated bundles without using Artifactory.

Declaring third party dependencies
==================================

When you need to add external third party library dependencies, simply add the maven coordinates (G.A.V) in artifactory.mvn.
The dependencies will be downloaded and will be put in cnf/artifactory/ directory.

Configuring the default maven "group id" that will be used when deploying bundles to artifatory
===============================================================================================

Edit build.bnd and change the "groupId" variable, which is currently set to "com.nokia.csf.mygroup"

Semantic Versioning Overview
============================

BndTools uses Semantic Versioning in order to detect code change made by developers during development.
During release, the bundles (byte code) are compared against the previous baseline for changes, and the package/bundle versions are calculated automatically. This frees developers from having to reason about complex versioning issues.

So, once you have deployed bundles to artifactory, you should also deploy the same bundles that you just uploaded to artifactory to a local "Baseline" repository.
Doing so will allow you to automatically manage osgi bundle/package versions.

How to build and deploy to Artifactory without Eclipse:
=======================================================

- first, clean and build bundles:

gradlew clean jar

this will generate the following:

     com.nokia.csf.service/generated/com.nokia.csf.service.jar
     .m2/repository/com/nokia/csf/mygroup/com.nokia.csf.service/1.0.0/com.nokia.csf.service-1.0.0.jar

as you can see the generated bundles are also deployed to ~/.m2/repository, like when maven is used.
This allows you to build multiple workspace on same host without artifactory.

- next, run junit tests and integration tests:

  ./gradlew check

- then deploy to artifactory (to http://localhost:8081/artifactory/libs-candidate-local/)

  ./gradlew release

- finally, deploy the artifacts to your local "Baseline" repo:

  ./gradlew -Dreleaserepo=Baseline

this will generate a baseline repo locally in cnf/baseline dir. This dir does not need to be committed. 

You can also deploy to both Artifactory and the local Baseline in one single command like this:

    ./gradlew -Dreleaserepo=Artifactory,Baseline release

Promote the release
===================

the release process consists is now copying the deployed artifacts (libs-candidates-local) to libs-delivered-local.
To do so:

- go to cnf/scripts/ dir
- and type:

./promote_artifacts.sh admin admin123 http://localhost:8081/artifactory com.nokia.csf.mygroup libs-candidate-local libs-delivered-local

Of course, this script should be used from Jenkins, when you have finished to test the artifacts that have been pushed to the libs-candidate-repo

Play with the Semantic Versioning
=================================

Given a version number MAJOR.MINOR.PATCH, bndtools will propose to increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.

so, we have made our first release. Now let's modify the code and let's see if it can be built:

- edit com.nokia.csf.service/src/com/nokia/csf/service/impl/ServiceImpl.java and change the code

- and rebuild :

./gradlew jar

you will sudenly see this build error:

> Task :com.nokia.csf.service:jar
/home/nxuser/work/osgi/bnd/tests/com.nokia.csf.bndtools.workspace/com.nokia.csf.service/bnd.bnd:9: error: The bundle version (1.0.0/1.0.0) is too low, must be at least 1.0.1
MAJOR                BUNDLE     com.nokia.csf.service
  MAJOR              RESOURCES  <resources>
    MAJOR            RESOURCE   com/nokia/csf/service/impl/ServiceImpl.class
      REMOVED        SHA        114FA8112A2D6BC7951F8021BBBB2893EB99C637
      ADDED          SHA        9E3A2CC1E88684FAA4A6A9C2C0B10C7B9B0BA861



So, the semantic versioning has compared the new generated byte code from previous released version: it has compared com.nokia.csf.service/generated/com.nokia.csf.service.jar
to cnf/baseline/com.nokia.csf.service/com.nokia.csf.service-1.0.0.jar.

And it has detected that you have modified the implementation class. This is why the semantic versioning is proposing you to update the bundle version from 1.0.0 to 1.0.1.

so, simply apply the suggested modification:

- edit com.nokia.csf.service/bnd.bnd
- and change Bundle-Version like this:

Bundle-Version: 1.0.1.-SNAPSHOT

(don't pay attention to the -SNAPSHOT: this tag will be replaced by -RELEASE because we are in "release mode" by default

- and rebuild:

gradlew jar

This time, the build will be successful and you are now ready to repeat the release process:

    ./gradlew -Dreleaserepo=Artifactory,Baseline release

Doing a compatible change in a public service interface
=======================================================

in OSGI, package are exported with versions. The version is specified in the "packageinfo" file located in the package directory (source):
See com.nokia.csf.service/src/com/nokia/csf/service/packageinfo

So, when a bundle exports a package with a public service interface, there are two cases:

  -the interface is assumed to be implemented by a service component, not by users.
  -the interface is assumed to be implemented by applications user code.

Be aware that, by default, bndtools assumes that any public interface is meant to be implemented by application user code.
So, if you define an exported package with a public service interface, then any compatible change will end up in a MAJOR package version bump.

For example, if you add a "sayHello2" method in the Service interface, then bndtools will ask you to bump the major version in the
com.nokia.csf.service/src/com/nokia/csf/service/packageinfo file.

This is of course something which must not be done (you have made a compatible change and the interface is implemented by yourself (by
com.nokia.csf.service/src/com/nokia/csf/service/impl/ServiceImpl.java).

So, to influence the semantic versioning, just add the @ProviderType on top of the Service.jave interface.
This will make sure the semantic versioning will only propose to bump the minor version (in the packageinfo file) in case you do a compatible change in
the Service interface.


Kicking off a baseline
======================

if you have lost the previously generated cnf/baseline/ directory, you can regenerate one by doing so:

- Do a checkout of the latest release into a "scratch workspace".
- Build the scratch workspace:

  gradlew jar

- Deploy the workspace artifacts to the local Baseline, like this:

  gradlew -Dreleaserepo=Baseline release

this will generate cnf/baseline/ directory. nowSimply copy it to your

- Copy cnf/baseline dir to your own workspace/cnf/ dir.

- Cleanup the scratch workspace.


Doing semantic versioning under Eclipse
=======================================

- go to "BndTools -> Release Workspace Bundles ...". Then deploy the bundles which need to be released to the "Artifactory" repo (or only to the Baseline repo).
















