# This is the configuration file used by the Gerrit server-side hooks
# to enforce project policies. The syntax of the configurarion is:
# [HEADING]
# variable_name1=value1
# variable_name2=value2
# ...etc...
#
# Currently supported HEADING types are:
# 1. JIRA (mandatory)
# 2. FILEPOLICY (optional)
#
#
# The actual definitions are below
#

#
# [JIRA] - Mandatory
#
[JIRA]

#
# server [Server URL]
#
# The URL to the GreenHopper corporate JIRA instance
#
server=https://greenhopper.app.alcatel-lucent.com

#
# scmfield [Mandatory if 'updatejirawithchangeset' is set to 'true']
#
# This option centers on which field in a JIRA issue is to be updated.
# Currently, only the 'comments' field is supported.
#
scmfield=comments

#
# proxy [URL of the proxy host/port to use]
#
proxy=https://proxy.lbs.alcatel-lucent.com:8000

#
# jiraidmandatory [true|false]
#
# If true, the hooks will enforce that commit messages begin with text which
# look like a JIRA ID.
#
jiraidmandatory=true

#
# checkidinjira [true|false]
#
# If true, the hooks will verify the JIRA ID is actually a valid one (in JIRA)
#
checkidinjira=true

#
# jiraidmatch [true|false]
#
# If false, the hooks will not perform JIRA checks relating to usermatch
# or statusmatch.  If true, the hooks will chedk that the JIRA ID is
# actually a valid JIRA issue.
#
jiraidmatch=true

#
# usermatch [true|false]
#
# If true, the hooks will check that the user who made the commit is the
# assignee in JIRA
#
usermatch=true

#
# statusmatch [true|false]
#
# If true, the hooks will check that the referenced JIRA issue has one of
# the valid states defined in 'validstates'.
#
statusmatch=true

#
# validstates [Valid JIRA states delimited by commas]
#
# Mandatory if 'statusmatch' is set to 'true'.  Used with 'statusmatch'.
#
# Example:
#
# validstates=Open,Reopened,In Progress
#
validstates=Open,Reopened,In Progress

#
# updatejirawithchangeset [true|false]
#
# If true, the hooks will attempt to udpate the referenced JIRA issue with the
# changeset info derived from the commit.
#
updatejirawithchangeset=true


#
# [FILEPOLICY] - Heading and definitions are optional
#
[FILEPOLICY]

#
# checkforbinary [true|yes|false|no]
#
# If true, the hooks will enforce a policy to stop binary files from being
# added into the repository.
#
checkforbinary=false

#
# preventrenamesordeletions [true|yes|false|no]
#
# If true, the hooks will enforce a policy to prevent the renaming or deletion
# of files/directories in the repository by users who are not in the Config.
# Mgmt. or Administrator groups.
#
preventrenamesordeletions=true

#
# illegal_characters
#
# You can set all of the characters in this parameter, then the hook will
# check whether these illegal characters are in the file name(s)
#
# Example:
#
# illegal_characters=\?&lt;&gt;:*^
#
# If the parameter is empty (unassigned), the hook will not check for the
# illegal characters.
#
illegal_characters=

#
# symbolic_link_check [true|yes|false|no]
#
# If true, the hook will check each new added file to see whether there are
# any symbolic links present in each commit.
#
symbolic_link_check=false

#
# case_conflict_check [true|yes|false|no]
#
# If true, the hook will check each new added file to see whether there is
# an existing case conflict in the repository.
#
case_conflict_check=false

#
# file_size_threshold [0|no|off = will not check]
#
# File size threshold to check for, which can include K/M for kilo/megabytes
#
###file_size_threshold=500K


#
# The 'REVIEWERS' heading and definitions are optional.
#
###[REVIEWERS]
#

#
# autoadd [gitowners|false|no]
#
# If 'gitowners' exists, the hook will add reviewers automatically as
# indicated/governed by the rule configuration in .reviewaccess
#
###autoadd=gitowners
