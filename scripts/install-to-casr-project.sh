#!/bin/bash

# This script installs into casr project the bnd files generated by bootstrap-bnd.sh script.

usage() {
    echo "Usage: $0 -o outputdir "
    echo "-o outputdir: specifies the output dir where the bnd files will be installed"
    exit 1
}

# load common shell functions
function load_lib() {
    SCRIPTDIR=`which $0`
    SCRIPTDIR=`dirname $SCRIPTDIR`
    SCRIPTDIR=`(unset CDPATH ; cd $SCRIPTDIR ; pwd)`
    . $SCRIPTDIR/lib.sh
}

while  [ ! $# = 0 ]
do case $1 in
       -h|-help|--help)
		   usage
		   ;;
       -o|--output)
		   shift
		   OUTPUT=$1
		   # trim trailing /
		   OUTPUT=$(echo $OUTPUT | sed 's:/*$::')
		   ;;
       *)
	 	  usage
   esac
   shift
done

if [ "$OUTPUT" == "" ]
then
    usage
fi

load_lib

for bndfile in *.bnd;
do
    # derive the jarfile from the bndfile name
    jarfile=`basename $bndfile .bnd`.jar

    # ignore this bnd file if the corresponding jar is not there
    if [ ! -f $jarfile ]; then
	continue
    fi

    # obtain the bsn
    bsn=`parse_manifest_header $jarfile Bundle-SymbolicName`

    # remove the com.nokia.as.thirdparty prefix from the bsn (else we would endup with dirty long file names,
    # and since the bnd files are copied to CSF-CASR/core/com.nokia.as.thirdparty project, it's not
    # needed to repeat the com.nokia.as.thirdparty prefix in bnd file names
    bsn=`echo $bsn|sed 's/com\.nokia\.as\.thirdparty\.//'`
    
    # copy bnd file to output dir, but use bsn as target bndfile name
    if [ -f $OUTPUT/${bsn}.bnd ]; then
	echo "$OUTPUT/${bsn}.bnd already exists"
	continue
    fi
    
    # remove -ouput and -classpath option and copy bnd file to target dir
    cat $bndfile | sed '/^\-classpath\:/ d' | sed '/^\-output\:/ d' > $OUTPUT/${bsn}.bnd
done
    
    


