// Copyright 2000-2021 Nokia
//
// Licensed under the Apache License 2.0
// SPDX-License-Identifier: Apache-2.0
//

package com.nextenso.proxylet;

import java.util.Enumeration;

import com.nextenso.proxylet.event.ProxyletEvent;
import com.nextenso.proxylet.event.ProxyletEventListener;

/**
 * This interface encapsulates methods common to any type of data wishing to be
 * processed by proxylets.
 * <p/>
 * The main features are: attributes storing (via get/set methods) and event
 * triggering.
 */
public interface ProxyletData {

	/**
	 * Gets an identification number generated by the Engine.
	 * 
	 * @return The identification.
	 */
	public int getId();

	/**
	 * Gets the ProxyletContext in which the data are processed.
	 * 
	 * @return The ProxyletContext.
	 */
	public ProxyletContext getProxyletContext();

	/**
	 * Fires a ProxyletEvent that all registered ProxyletEventListeners will get. <br/>
	 * This feature enables asynchronous and synchronous event notifications. <br/>
	 * The ProxyletEvent object will be automatically constructed using the
	 * specified source and the current ProxyletData.
	 * 
	 * @param source The source of the event.
	 * @param asynchronous true if asynchronous; false if synchronous
	 */
	public void fireProxyletEvent(Object source, boolean asynchronous);

	/**
	 * Fires a ProxyletEvent that all registered ProxyletEventListeners will get.
	 * 
	 * @param event the ProxyletEvent.
	 * @param asynchronous true if asynchronous; false if synchronous
	 * @see com.nextenso.proxylet.ProxyletData#fireProxyletEvent(java.lang.Object,
	 *      boolean)
	 */
	public void fireProxyletEvent(ProxyletEvent event, boolean asynchronous);

	/**
	 * Registers a ProxyletEventListener.
	 * 
	 * @param listener The ProxyletListener to add to the list of listeners.
	 */
	public void registerProxyletEventListener(ProxyletEventListener listener);

	/**
	 * Unregisters a ProxyletEventListener.
	 * 
	 * @param listener the ProxyletListener to remove from the list of listeners.
	 */
	public void deregisterProxyletEventListener(ProxyletEventListener listener);

	/**
	 * Gets the specified attribute.
	 * 
	 * @param name The attribute name.
	 * @return The attribute value, or <code>null</code> if the attribute is not
	 *         set.
	 */
	public Object getAttribute(Object name);

	/**
	 * Gets the attribute names.
	 * 
	 * @return An Enumeration of the attribute names.
	 */
	public Enumeration getAttributeNames();

	/**
	 * Sets an attribute.
	 * 
	 * @param name The attribute name.
	 * @param value The attribute value.
	 */
	public void setAttribute(Object name, Object value);

	/**
	 * Removes an attribute.
	 * 
	 * @param name The attribute name.
	 * @return The attribute value that was removed, or <code>null</code> if the
	 *         attribute was not set.
	 */
	public Object removeAttribute(Object name);

	/**
	 * Resumes the data when it was suspended. <BR>
	 * 
	 * @param status The status.
	 */
	public void resume(int status);

	/**
	 * Sets the suspend listener.
	 * 
	 * @param listener The listener .
	 * @param delay The delay in milliseconds.
	 */
	public void setSuspendListener(SuspendListener listener, long delay);

}
